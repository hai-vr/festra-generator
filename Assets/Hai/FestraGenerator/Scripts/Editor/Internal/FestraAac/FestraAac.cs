using System;
using System.Linq;
using System.Reflection;
using UnityEditor;
using UnityEditor.Animations;
using UnityEngine;
using VRC.SDK3.Avatars.Components;
using Object = UnityEngine.Object;
using Random = UnityEngine.Random;

namespace Hai.FestraGenerator.Scripts.Editor.Internal.FestraAac
{
    public static class FestraAacV0
    {
        public static FestraAacFlBase Create(FestraAacConfiguration configuration)
        {
            return new FestraAacFlBase(configuration);
        }

        internal static AnimatorController AnimatorOf(VRCAvatarDescriptor ad, VRCAvatarDescriptor.AnimLayerType animLayerType)
        {
            return (AnimatorController) ad.baseAnimationLayers.First(it => it.type == animLayerType).animatorController;
        }

        internal static AnimationClip NewClip(FestraAacConfiguration component, string suffix)
        {
            return RegisterClip(component, suffix, new AnimationClip());
        }

        internal static T FESTRA_RegisterAsset<T>(FestraAacConfiguration component, string suffix, T asset) where T : Object
        {
            asset.name = "zAutogenerated__" + component.AssetKey + "__" + suffix + "_" + Random.Range(0, Int32.MaxValue); // FIXME animation name conflict
            asset.hideFlags = HideFlags.None;
            if (EditorUtility.IsPersistent(component.AssetContainer))
            {
                AssetDatabase.AddObjectToAsset(asset, component.AssetContainer);
            }
            return asset;
        }

        internal static AnimationClip RegisterClip(FestraAacConfiguration component, string suffix, AnimationClip clip)
        {
            clip.name = "zAutogenerated__" + component.AssetKey + "__" + suffix + "_" + Random.Range(0, Int32.MaxValue); // FIXME animation name conflict
            clip.hideFlags = HideFlags.None;
            if (EditorUtility.IsPersistent(component.AssetContainer))
            {
                AssetDatabase.AddObjectToAsset(clip, component.AssetContainer);
            }
            return clip;
        }

        internal static BlendTree NewBlendTreeAsRaw(FestraAacConfiguration component, string suffix)
        {
            var clip = new BlendTree();
            clip.name = "zAutogenerated__" + component.AssetKey + "__" + suffix + "_" + Random.Range(0, Int32.MaxValue); // FIXME animation name conflict
            clip.hideFlags = HideFlags.None;
            if (EditorUtility.IsPersistent(component.AssetContainer))
            {
                AssetDatabase.AddObjectToAsset(clip, component.AssetContainer);
            }
            return clip;
        }

        internal static EditorCurveBinding Binding(FestraAacConfiguration component, Type type, Transform transform, string propertyName)
        {
            return new EditorCurveBinding
            {
                path = ResolveRelativePath(component.AnimatorRoot, transform),
                type = type,
                propertyName = propertyName
            };
        }

        internal static AnimationCurve OneFrame(float desiredValue)
        {
            return AnimationCurve.Constant(0f, 1 / 60f, desiredValue);
        }

        internal static AnimationCurve ConstantSeconds(float seconds, float desiredValue)
        {
            return AnimationCurve.Constant(0f, seconds, desiredValue);
        }

        internal static string ResolveRelativePath(Transform avatar, Transform item)
        {
            if (item.parent != avatar && item.parent != null)
            {
                return ResolveRelativePath(avatar, item.parent) + "/" + item.name;
            }

            return item.name;
        }

        internal static EditorCurveBinding ToSubBinding(EditorCurveBinding binding, string suffix)
        {
            return new EditorCurveBinding {path = binding.path, type = binding.type, propertyName = binding.propertyName + "." + suffix};
        }

        internal static void UndoDisable<T>(T state)
        {
            typeof(T)
                .GetProperty("pushUndo", BindingFlags.Instance | BindingFlags.NonPublic)
                .SetValue(state, false);
        }

        internal static void UndoEnable<T>(T state)
        {
            typeof(T)
                .GetProperty("pushUndo", BindingFlags.Instance | BindingFlags.NonPublic)
                .SetValue(state, true);
        }
    }

    public struct FestraAacConfiguration
    {
        public string SystemName;
        public VRCAvatarDescriptor AvatarDescriptor;
        public Transform AnimatorRoot;
        public Transform DefaultValueRoot;
        public AnimatorController AssetContainer;
        public string AssetKey;
        public IFestraAacDefaultsProvider DefaultsProvider;
    }

    public struct FestraAacFlLayer
    {
        private readonly AnimatorController _animatorController;
        private readonly FestraAacConfiguration _configuration;
        private readonly string _fullLayerName;
        private readonly FestraAacFlStateMachine _stateMachine;

        internal FestraAacFlLayer(AnimatorController animatorController, FestraAacConfiguration configuration, FestraAacFlStateMachine stateMachine, string fullLayerName)
        {
            _animatorController = animatorController;
            _configuration = configuration;
            _fullLayerName = fullLayerName;
            _stateMachine = stateMachine;
        }

        public FestraAacFlState NewState(string name)
        {
            var lastState = _stateMachine.LastNodePosition();
            var state = _stateMachine.NewState(name, 0, 0).Shift(lastState, 0, 1);
            FestraAacV0.UndoDisable(state.State);
            return state;
        }

        public FestraAacFlState NewState(string name, int x, int y)
        {
            var state = _stateMachine.NewState(name, x, y);
            FestraAacV0.UndoDisable(state.State);
            return state;
        }

        public FestraAacFlStateMachine NewSubStateMachine(string name)
        {
            var ssm = _stateMachine.NewSubStateMachine(name);
            FestraAacV0.UndoDisable(ssm.Machine);
            return ssm;
        }

        public FestraAacFlStateMachine NewSubStateMachine(string name, int x, int y)
        {
            var ssm = _stateMachine.NewSubStateMachine(name, x, y);
            FestraAacV0.UndoDisable(ssm.Machine);
            return ssm;
        }

        public FestraAacFlTransition AnyTransitionsTo(FestraAacFlState destination)
        {
            var transition = _stateMachine.AnyTransitionsTo(destination);
            FestraAacV0.UndoDisable(transition.Transition);
            return transition;
        }

        public FestraAacFlEntryTransition EntryTransitionsTo(FestraAacFlState destination)
        {
            var transition = _stateMachine.EntryTransitionsTo(destination);
            FestraAacV0.UndoDisable(transition.Transition);
            return transition;
        }
        
        public FestraAacFlEntryTransition EntryTransitionsTo(FestraAacFlStateMachine destination)
        {
            var transition = _stateMachine.EntryTransitionsTo(destination);
            FestraAacV0.UndoDisable(transition.Transition);
            return transition;
        }

        public FestraAacFlBoolParameter BoolParameter(string parameterName) => _stateMachine.BackingAnimator().BoolParameter(parameterName);
        public FestraAacFlBoolParameter TriggerParameterAsBool(string parameterName) => _stateMachine.BackingAnimator().TriggerParameter(parameterName);
        public FestraAacFlFloatParameter FloatParameter(string parameterName) => _stateMachine.BackingAnimator().FloatParameter(parameterName);
        public FestraAacFlIntParameter IntParameter(string parameterName) => _stateMachine.BackingAnimator().IntParameter(parameterName);
        public FestraAacFlBoolParameterGroup BoolParameters(params string[] parameterNames) => _stateMachine.BackingAnimator().BoolParameters(parameterNames);
        public FestraAacFlBoolParameterGroup TriggerParametersAsBools(params string[] parameterNames) => _stateMachine.BackingAnimator().TriggerParameters(parameterNames);
        public FestraAacFlFloatParameterGroup FloatParameters(params string[] parameterNames) => _stateMachine.BackingAnimator().FloatParameters(parameterNames);
        public FestraAacFlIntParameterGroup IntParameters(params string[] parameterNames) => _stateMachine.BackingAnimator().IntParameters(parameterNames);
        public FestraAacFlBoolParameterGroup BoolParameters(params FestraAacFlBoolParameter[] parameters) => _stateMachine.BackingAnimator().BoolParameters(parameters);
        public FestraAacFlBoolParameterGroup TriggerParametersAsBools(params FestraAacFlBoolParameter[] parameters) => _stateMachine.BackingAnimator().TriggerParameters(parameters);
        public FestraAacFlFloatParameterGroup FloatParameters(params FestraAacFlFloatParameter[] parameters) => _stateMachine.BackingAnimator().FloatParameters(parameters);
        public FestraAacFlIntParameterGroup IntParameters(params FestraAacFlIntParameter[] parameters) => _stateMachine.BackingAnimator().IntParameters(parameters);
        public FestraAacAv3 Av3() => new FestraAacAv3(_stateMachine.BackingAnimator());

        public FestraAacFlLayer OverrideValue(FestraAacFlBoolParameter toBeForced, bool value)
        {
            var parameters = _animatorController.parameters;
            foreach (var param in parameters)
            {
                if (param.name == toBeForced.Name)
                {
                    param.defaultBool = value;
                }
            }

            _animatorController.parameters = parameters;

            return this;
        }

        public FestraAacFlLayer OverrideValue(FestraAacFlFloatParameter toBeForced, float value)
        {
            var parameters = _animatorController.parameters;
            foreach (var param in parameters)
            {
                if (param.name == toBeForced.Name)
                {
                    param.defaultFloat = value;
                }
            }

            _animatorController.parameters = parameters;

            return this;
        }

        public FestraAacFlLayer OverrideValue(FestraAacFlIntParameter toBeForced, int value)
        {
            var parameters = _animatorController.parameters;
            foreach (var param in parameters)
            {
                if (param.name == toBeForced.Name)
                {
                    param.defaultInt = value;
                }
            }

            _animatorController.parameters = parameters;

            return this;
        }

        public FestraAacFlLayer FESTRA_WithLayerWeight(float layerWeight)
        {
            var finalFullLayerName = _fullLayerName;
            _animatorController.layers = _animatorController.layers
                .Select(layer =>
                {
                    if (layer.name == finalFullLayerName)
                    {
                        layer.defaultWeight = layerWeight;
                    }

                    return layer;
                })
                .ToArray();

            return this;
        }

        public FestraAacFlLayer WithAvatarMask(AvatarMask avatarMask)
        {
            var finalFullLayerName = _fullLayerName;
            _animatorController.layers = _animatorController.layers
                .Select(layer =>
                {
                    if (layer.name == finalFullLayerName)
                    {
                        layer.avatarMask = avatarMask;
                    }

                    return layer;
                })
                .ToArray();

            return this;
        }

        public FestraAacFlLayer WithAvatarMaskNoTransforms()
        {
            ResolveAvatarMask(new Transform[0]);

            return this;
        }

        public FestraAacFlLayer ResolveAvatarMask(Transform[] paths)
        {
            // FIXME: Fragile
            var avatarMask = new AvatarMask();
            avatarMask.name = "zAutogenerated__" + _configuration.AssetKey + "_" + _fullLayerName + "__AvatarMask";
            avatarMask.hideFlags = HideFlags.None;

            if (paths.Length == 0)
            {
                avatarMask.transformCount = 1;
                avatarMask.SetTransformActive(0, false);
                avatarMask.SetTransformPath(0, "_ignored");
            }
            else
            {
                avatarMask.transformCount = paths.Length;
                for (var index = 0; index < paths.Length; index++)
                {
                    var transform = paths[index];
                    avatarMask.SetTransformActive(index, true);
                    avatarMask.SetTransformPath(index, FestraAacV0.ResolveRelativePath(_configuration.AnimatorRoot, transform));
                }
            }

            for (int i = 0; i < (int) AvatarMaskBodyPart.LastBodyPart; i++)
            {
                avatarMask.SetHumanoidBodyPartActive((AvatarMaskBodyPart) i, false);
            }

            if (EditorUtility.IsPersistent(_animatorController))
            {
                AssetDatabase.AddObjectToAsset(avatarMask, _animatorController);
            }

            WithAvatarMask(avatarMask);

            return this;
        }

        public FestraAacFlLayer WithDefaultState(FestraAacFlState newDefaultState)
        {
            _stateMachine.WithDefaultState(newDefaultState);
            return this;
        }
    }

    public class FestraAacFlBase
    {
        private readonly FestraAacConfiguration _configuration;

        internal FestraAacFlBase(FestraAacConfiguration configuration)
        {
            _configuration = configuration;
        }

        public FestraAacFlClip NewClip()
        {
            var clip = FestraAacV0.NewClip(_configuration, Guid.NewGuid().ToString());
            return new FestraAacFlClip(_configuration, clip);
        }

        public FestraAacFlClip CopyClip(AnimationClip originalClip)
        {
            var newClip = UnityEngine.Object.Instantiate(originalClip);
            var clip = FestraAacV0.RegisterClip(_configuration, Guid.NewGuid().ToString(), newClip);
            return new FestraAacFlClip(_configuration, clip);
        }

        public Motion FESTRA_StoringMotion(Motion motion)
        {
            return FestraAacV0.FESTRA_RegisterAsset(_configuration, Guid.NewGuid().ToString(), motion);
        }

        public T FESTRA_StoringAsset<T>(T obj) where T : Object
        {
            FestraAacV0.FESTRA_RegisterAsset(_configuration, Guid.NewGuid().ToString(), obj);
            return obj;
        }

        public BlendTree NewBlendTreeAsRaw()
        {
            return FestraAacV0.NewBlendTreeAsRaw(_configuration, Guid.NewGuid().ToString());
        }

        public FestraAacFlClip NewClip(string name)
        {
            var clip = FestraAacV0.NewClip(_configuration, name);
            return new FestraAacFlClip(_configuration, clip);
        }

        public FestraAacFlClip DummyClipLasting(float numberOf, FestraAacFlUnit unit)
        {
            var dummyClip = FestraAacV0.NewClip(_configuration, $"D({numberOf} {Enum.GetName(typeof(FestraAacFlUnit), unit)})");

            var duration = unit == FestraAacFlUnit.Frames ? numberOf / 60f : numberOf;
            return new FestraAacFlClip(_configuration, dummyClip)
                .Animating(clip => clip.Animates("_ignored", typeof(GameObject), "m_IsActive")
                    .WithUnit(unit, keyframes => keyframes.Constant(0, 0f).Constant(duration, 0f)));
        }

        public void RemoveAllMainLayers()
        {
            var layerName = _configuration.SystemName;
            RemoveLayerOnAllControllers(_configuration.DefaultsProvider.ConvertLayerName(layerName));
        }

        public void RemoveAllSupportingLayers(string suffix)
        {
            var layerName = _configuration.SystemName;
            RemoveLayerOnAllControllers(_configuration.DefaultsProvider.ConvertLayerNameWithSuffix(layerName, suffix));
        }

        public void FESTRA_RemoveMainArbitraryControllerLayer(AnimatorController controller)
        {
            var layerName = _configuration.SystemName;
            var convertedName = _configuration.DefaultsProvider.ConvertLayerName(layerName);
            new FestraAacAnimatorRemoval(controller).RemoveLayer(convertedName);
        }

        public void FESTRA_RemoveSupportingArbitraryControllerLayer(AnimatorController controller, string suffix)
        {
            var layerName = _configuration.SystemName;
            var convertedName = _configuration.DefaultsProvider.ConvertLayerNameWithSuffix(layerName, suffix);
            new FestraAacAnimatorRemoval(controller).RemoveLayer(convertedName);
        }

        private void RemoveLayerOnAllControllers(string layerName)
        {
            var layers = _configuration.AvatarDescriptor.baseAnimationLayers.Select(layer => layer.animatorController).Where(layer => layer != null).Distinct().ToList();
            foreach (var customAnimLayer in layers)
            {
                new FestraAacAnimatorRemoval((AnimatorController) customAnimLayer).RemoveLayer(_configuration.DefaultsProvider.ConvertLayerName(layerName));
            }
        }

        public FestraAacFlLayer CreateMainFxLayer() => DoCreateMainLayerOnController(VRCAvatarDescriptor.AnimLayerType.FX);
        public FestraAacFlLayer CreateMainGestureLayer() => DoCreateMainLayerOnController(VRCAvatarDescriptor.AnimLayerType.Gesture);
        public FestraAacFlLayer CreateMainActionLayer() => DoCreateMainLayerOnController(VRCAvatarDescriptor.AnimLayerType.Action);
        public FestraAacFlLayer CreateMainIdleLayer() => DoCreateMainLayerOnController(VRCAvatarDescriptor.AnimLayerType.Additive);
        public FestraAacFlLayer CreateMainLocomotionLayer() => DoCreateMainLayerOnController(VRCAvatarDescriptor.AnimLayerType.Base);
        public FestraAacFlLayer CreateMainAv3Layer(VRCAvatarDescriptor.AnimLayerType animLayerType) => DoCreateMainLayerOnController(animLayerType);

        public FestraAacFlLayer CreateSupportingFxLayer(string suffix) => DoCreateSupportingLayerOnController(VRCAvatarDescriptor.AnimLayerType.FX, suffix);
        public FestraAacFlLayer CreateSupportingGestureLayer(string suffix) => DoCreateSupportingLayerOnController(VRCAvatarDescriptor.AnimLayerType.Gesture, suffix);
        public FestraAacFlLayer CreateSupportingActionLayer(string suffix) => DoCreateSupportingLayerOnController(VRCAvatarDescriptor.AnimLayerType.Action, suffix);
        public FestraAacFlLayer CreateSupportingIdleLayer(string suffix) => DoCreateSupportingLayerOnController(VRCAvatarDescriptor.AnimLayerType.Additive, suffix);
        public FestraAacFlLayer CreateSupportingLocomotionLayer(string suffix) => DoCreateSupportingLayerOnController(VRCAvatarDescriptor.AnimLayerType.Base, suffix);
        public FestraAacFlLayer CreateSupportingAv3Layer(VRCAvatarDescriptor.AnimLayerType animLayerType, string suffix) => DoCreateSupportingLayerOnController(animLayerType, suffix);

        public FestraAacFlLayer CreateMainArbitraryControllerLayer(AnimatorController controller) => DoCreateLayer(controller, _configuration.DefaultsProvider.ConvertLayerName(_configuration.SystemName));
        public FestraAacFlLayer CreateSupportingArbitraryControllerLayer(AnimatorController controller, string suffix) => DoCreateLayer(controller, _configuration.DefaultsProvider.ConvertLayerNameWithSuffix(_configuration.SystemName, suffix));
        public FestraAacFlLayer CreateFirstArbitraryControllerLayer(AnimatorController controller) => DoCreateLayer(controller, controller.layers[0].name);

        private FestraAacFlLayer DoCreateMainLayerOnController(VRCAvatarDescriptor.AnimLayerType animType)
        {
            var animator = FestraAacV0.AnimatorOf(_configuration.AvatarDescriptor, animType);
            var layerName = _configuration.DefaultsProvider.ConvertLayerName(_configuration.SystemName);

            return DoCreateLayer(animator, layerName);
        }

        private FestraAacFlLayer DoCreateSupportingLayerOnController(VRCAvatarDescriptor.AnimLayerType animType, string suffix)
        {
            var animator = FestraAacV0.AnimatorOf(_configuration.AvatarDescriptor, animType);
            var layerName = _configuration.DefaultsProvider.ConvertLayerNameWithSuffix(_configuration.SystemName, suffix);

            return DoCreateLayer(animator, layerName);
        }

        private FestraAacFlLayer DoCreateLayer(AnimatorController animator, string layerName)
        {
            var ag = new FestraAacAnimatorGenerator(animator, CreateEmptyClip().Clip, _configuration.DefaultsProvider);
            var machine = ag.CreateOrRemakeLayerAtSameIndex(layerName, 1f);

            return new FestraAacFlLayer(animator, _configuration, machine, layerName);
        }

        private FestraAacFlClip CreateEmptyClip()
        {
            var emptyClip = DummyClipLasting(1, FestraAacFlUnit.Frames);
            return emptyClip;
        }

        public FestraAacVrcAssetLibrary VrcAssets()
        {
            return new FestraAacVrcAssetLibrary();
        }

        public void ClearPreviousAssets()
        {
            var allSubAssets = AssetDatabase.LoadAllAssetsAtPath(AssetDatabase.GetAssetPath(_configuration.AssetContainer));
            foreach (var subAsset in allSubAssets)
            {
                if (subAsset.name.StartsWith($"zAutogenerated__{_configuration.AssetKey}__")
                    && (subAsset is AnimationClip || subAsset is BlendTree || subAsset is AvatarMask))
                {
                    AssetDatabase.RemoveObjectFromAsset(subAsset);
                }
            }
        }
    }

    public class FestraAacAv3
    {
        private readonly FestraAacBackingAnimator _backingAnimator;

        internal FestraAacAv3(FestraAacBackingAnimator backingAnimator)
        {
            _backingAnimator = backingAnimator;
        }

        // ReSharper disable InconsistentNaming
        public FestraAacFlBoolParameter IsLocal => _backingAnimator.BoolParameter("IsLocal");
        public FestraAacFlEnumIntParameter<Av3Viseme> Viseme => _backingAnimator.EnumParameter<Av3Viseme>("Viseme");
        public FestraAacFlEnumIntParameter<Av3Gesture> GestureLeft => _backingAnimator.EnumParameter<Av3Gesture>("GestureLeft");
        public FestraAacFlEnumIntParameter<Av3Gesture> GestureRight => _backingAnimator.EnumParameter<Av3Gesture>("GestureRight");
        public FestraAacFlFloatParameter GestureLeftWeight => _backingAnimator.FloatParameter("GestureLeftWeight");
        public FestraAacFlFloatParameter GestureRightWeight => _backingAnimator.FloatParameter("GestureRightWeight");
        public FestraAacFlFloatParameter AngularY => _backingAnimator.FloatParameter("AngularY");
        public FestraAacFlFloatParameter VelocityX => _backingAnimator.FloatParameter("VelocityX");
        public FestraAacFlFloatParameter VelocityY => _backingAnimator.FloatParameter("VelocityY");
        public FestraAacFlFloatParameter VelocityZ => _backingAnimator.FloatParameter("VelocityZ");
        public FestraAacFlFloatParameter Upright => _backingAnimator.FloatParameter("Upright");
        public FestraAacFlBoolParameter Grounded => _backingAnimator.BoolParameter("Grounded");
        public FestraAacFlBoolParameter Seated => _backingAnimator.BoolParameter("Seated");
        public FestraAacFlBoolParameter AFK => _backingAnimator.BoolParameter("AFK");
        public FestraAacFlIntParameter TrackingType => _backingAnimator.IntParameter("TrackingType");
        public FestraAacFlIntParameter VRMode => _backingAnimator.IntParameter("VRMode");
        public FestraAacFlBoolParameter MuteSelf => _backingAnimator.BoolParameter("MuteSelf");
        public FestraAacFlBoolParameter InStation => _backingAnimator.BoolParameter("InStation");
        public FestraAacFlFloatParameter Voice => _backingAnimator.FloatParameter("Voice");
        // ReSharper restore InconsistentNaming

        public IFestraAacFlCondition ItIsRemote() => IsLocal.IsFalse();
        public IFestraAacFlCondition ItIsLocal() => IsLocal.IsTrue();

        public enum Av3Gesture
        {
            // Specify all the values explicitly because they should be dictated by VRChat, not enumeration order.
            Neutral = 0,
            Fist = 1,
            HandOpen = 2,
            Fingerpoint = 3,
            Victory = 4,
            RockNRoll = 5,
            HandGun = 6,
            ThumbsUp = 7
        }

        public enum Av3Viseme
        {
            // Specify all the values explicitly because they should be dictated by VRChat, not enumeration order.
            // ReSharper disable InconsistentNaming
            sil = 0,
            pp = 1,
            ff = 2,
            th = 3,
            dd = 4,
            kk = 5,
            ch = 6,
            ss = 7,
            nn = 8,
            rr = 9,
            aa = 10,
            e = 11,
            ih = 12,
            oh = 13,
            ou = 14
            // ReSharper restore InconsistentNaming
        }
    }

    public class FestraAacVrcAssetLibrary
    {
        public AvatarMask LeftHandAvatarMask()
        {
            return AssetDatabase.LoadAssetAtPath<AvatarMask>("Assets/VRCSDK/Examples3/Animation/Masks/vrc_Hand Left.mask");
        }

        public AvatarMask RightHandAvatarMask()
        {
            return AssetDatabase.LoadAssetAtPath<AvatarMask>("Assets/VRCSDK/Examples3/Animation/Masks/vrc_Hand Right.mask");
        }

        public AnimationClip ProxyForGesture(FestraAacAv3.Av3Gesture gesture, bool masculine)
        {
            return AssetDatabase.LoadAssetAtPath<AnimationClip>("Assets/VRCSDK/Examples3/Animation/ProxyAnim/" + ResolveProxyFilename(gesture, masculine));
        }

        private static string ResolveProxyFilename(FestraAacAv3.Av3Gesture gesture, bool masculine)
        {
            switch (gesture)
            {
                case FestraAacAv3.Av3Gesture.Neutral: return masculine ? "proxy_hands_idle.anim" : "proxy_hands_idle2.anim";
                case FestraAacAv3.Av3Gesture.Fist: return "proxy_hands_fist.anim";
                case FestraAacAv3.Av3Gesture.HandOpen: return "proxy_hands_open.anim";
                case FestraAacAv3.Av3Gesture.Fingerpoint: return "proxy_hands_point.anim";
                case FestraAacAv3.Av3Gesture.Victory: return "proxy_hands_peace.anim";
                case FestraAacAv3.Av3Gesture.RockNRoll: return "proxy_hands_rock.anim";
                case FestraAacAv3.Av3Gesture.HandGun: return "proxy_hands_gun.anim";
                case FestraAacAv3.Av3Gesture.ThumbsUp: return "proxy_hands_thumbs_up.anim";
                default:
                    throw new ArgumentOutOfRangeException(nameof(gesture), gesture, null);
            }
        }
    }

    public class FestraAacAnimatorRemoval
    {
        private readonly AnimatorController _animatorController;

        public FestraAacAnimatorRemoval(AnimatorController animatorController)
        {
            _animatorController = animatorController;
        }

        public void RemoveLayer(string layerName)
        {
            var index = FindIndexOf(layerName);
            if (index == -1) return;

            _animatorController.RemoveLayer(index);
        }

        private int FindIndexOf(string layerName)
        {
            return _animatorController.layers.ToList().FindIndex(layer => layer.name == layerName);
        }
    }

    public class FestraAacAnimatorGenerator
    {
        private readonly AnimatorController _animatorController;
        private readonly AnimationClip _emptyClip;
        private readonly IFestraAacDefaultsProvider _defaultsProvider;

        internal FestraAacAnimatorGenerator(AnimatorController animatorController, AnimationClip emptyClip, IFestraAacDefaultsProvider defaultsProvider)
        {
            _animatorController = animatorController;
            _emptyClip = emptyClip;
            _defaultsProvider = defaultsProvider;
        }

        internal void CreateParamsAsNeeded(params FestraAacFlParameter[] parameters)
        {
            foreach (var parameter in parameters)
            {
                switch (parameter)
                {
                    case FestraAacFlIntParameter _:
                        CreateParamIfNotExists(parameter.Name, AnimatorControllerParameterType.Int);
                        break;
                    case FestraAacFlFloatParameter _:
                        CreateParamIfNotExists(parameter.Name, AnimatorControllerParameterType.Float);
                        break;
                    case FestraAacFlBoolParameter _:
                        CreateParamIfNotExists(parameter.Name, AnimatorControllerParameterType.Bool);
                        break;
                }
            }
        }
        internal void CreateTriggerParamsAsNeeded(params FestraAacFlBoolParameter[] parameters)
        {
            foreach (var parameter in parameters)
            {
                CreateParamIfNotExists(parameter.Name, AnimatorControllerParameterType.Trigger);
            }
        }

        private void CreateParamIfNotExists(string paramName, AnimatorControllerParameterType type)
        {
            if (_animatorController.parameters.FirstOrDefault(param => param.name == paramName) == null)
            {
                _animatorController.AddParameter(paramName, type);
            }
        }

        // DEPRECATED: This causes the editor window to glitch by deselecting, which is jarring for experimentation
        // Re-enabled in FESTRA to reduce regeneration times.
        internal FestraAacFlStateMachine CreateOrRemakeLayerAtSameIndex(string layerName, float weightWhenCreating, AvatarMask maskWhenCreating = null)
        {
            var originalIndexToPreserveOrdering = FindIndexOf(layerName);
            if (originalIndexToPreserveOrdering != -1)
            {
                try
                {
                    FestraAacV0.UndoDisable(_animatorController);
                    _animatorController.RemoveLayer(originalIndexToPreserveOrdering);
                }
                finally
                {
                    FestraAacV0.UndoEnable(_animatorController);
                }

            }

            AddLayerWithWeight(layerName, weightWhenCreating, maskWhenCreating);
            if (originalIndexToPreserveOrdering != -1)
            {
                var items = _animatorController.layers.ToList();
                var last = items[items.Count - 1];
                items.RemoveAt(items.Count - 1);
                items.Insert(originalIndexToPreserveOrdering, last);
                _animatorController.layers = items.ToArray();
            }

            var layer = TryGetLayer(layerName);
            var machinist = new FestraAacFlStateMachine(layer.stateMachine, _emptyClip, new FestraAacBackingAnimator(this), _defaultsProvider);
            _defaultsProvider.ConfigureStateMachine(layer.stateMachine);
            FestraAacV0.UndoDisable(layer.stateMachine);
            return machinist;
        }

        internal FestraAacFlStateMachine CreateOrClearLayerAtSameIndex(string layerName, float weightWhenCreating, AvatarMask maskWhenCreating = null)
        {
            var originalIndexToPreserveOrdering = FindIndexOf(layerName);
            if (originalIndexToPreserveOrdering != -1)
            {
                FestraAacV0.UndoDisable(_animatorController.layers[originalIndexToPreserveOrdering].stateMachine);
                RecursivelyClearChildrenMachines(_animatorController.layers[originalIndexToPreserveOrdering].stateMachine);

                _animatorController.layers[originalIndexToPreserveOrdering].stateMachine.stateMachines = new ChildAnimatorStateMachine[0];
                _animatorController.layers[originalIndexToPreserveOrdering].stateMachine.states = new ChildAnimatorState[0];
                _animatorController.layers[originalIndexToPreserveOrdering].stateMachine.entryTransitions = new AnimatorTransition[0];
                _animatorController.layers[originalIndexToPreserveOrdering].stateMachine.anyStateTransitions = new AnimatorStateTransition[0];
            }
            else
            {
                _animatorController.AddLayer(_animatorController.MakeUniqueLayerName(layerName));
                originalIndexToPreserveOrdering = _animatorController.layers.Length - 1;
            }

            var layers = _animatorController.layers;
            layers[originalIndexToPreserveOrdering].avatarMask = maskWhenCreating;
            layers[originalIndexToPreserveOrdering].defaultWeight = weightWhenCreating;
            _animatorController.layers = layers;

            var layer = TryGetLayer(layerName);
            var machinist = new FestraAacFlStateMachine(layer.stateMachine, _emptyClip, new FestraAacBackingAnimator(this), _defaultsProvider);
            _defaultsProvider.ConfigureStateMachine(layer.stateMachine);
            return machinist;
        }

        private void RecursivelyClearChildrenMachines(AnimatorStateMachine parentMachine)
        {
            // TODO: RemoveStateMachine might already be recursive
            foreach (var childStateMachineHolder in parentMachine.stateMachines)
            {
                RecursivelyClearChildrenMachines(childStateMachineHolder.stateMachine);
                parentMachine.RemoveStateMachine(childStateMachineHolder.stateMachine);
            }
        }

        private int FindIndexOf(string layerName)
        {
            return _animatorController.layers.ToList().FindIndex(layer1 => layer1.name == layerName);
        }

        private AnimatorControllerLayer TryGetLayer(string layerName)
        {
            return _animatorController.layers.FirstOrDefault(it => it.name == layerName);
        }

        private void AddLayerWithWeight(string layerName, float weightWhenCreating, AvatarMask maskWhenCreating)
        {
            _animatorController.AddLayer(_animatorController.MakeUniqueLayerName(layerName));

            var mutatedLayers = _animatorController.layers;
            mutatedLayers[mutatedLayers.Length - 1].defaultWeight = weightWhenCreating;
            mutatedLayers[mutatedLayers.Length - 1].avatarMask = maskWhenCreating;
            _animatorController.layers = mutatedLayers;
        }
    }
}